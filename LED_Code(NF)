   // This code is meant to take at most 10 inputs and display them in WS2812B individually addressed LEDs
   // 9/3/2018 : Code currently takes 10 inputs and displays them at the same time and turns them off at the same time
   // Changes needed: Keep track of what led is on and assign a duration to each one. This way others can turn on
   //while others turn off or vice versa.
   
   
   
   
   
   
   #include <FastLED.h>
    #define LED_PIN     7
    #define NUM_LEDS    20
    #define BRIGHTNESS 30
    int input = 0;
    int array[10];
    int test = 3;
    int i =0;   
    CRGB leds[NUM_LEDS];


   
    
    void setup() {
      Serial.begin(9600);                                     // Serial communication at 9600buad. 
      Serial.flush();                                         // cleaning serial port and setting up LED settings
      FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);  
      FastLED.setBrightness(BRIGHTNESS);
      FastLED.show();                                         //Initializing all LEDs to off
    }      
     
    
    void loop() {

    if (Serial.available())                                  // Taking serial input and converting it to "input' variable
    {               


      input = Serial.parseInt();
      leds[input] = CRGB(255,0,0);
      
      }
                                                             

    if (input == 99){                                        // Will not execute untill input is set to 99.
    FastLED.show();                                          // once set light up all leds desired and turn all off after a second
    delay(1000);                                             // ***This will not work for the project. Each LED will have its own unique time stamp to remain on and off 
    for( int off = 0; off < NUM_LEDS; off++)                 // I need to find a way to keep track of each LED that is on, then each LED will be assigned its own time stamp***
    leds[off] = CRGB::Black;                                 
    FastLED.show();                                         //*Example of how it might work*
    }                                                       // if ((ledX == on) && currentMillis - previous millisX >= Ontime1))
    }                                                       // { led[X] = CRGB::Black;
                                                            // FastLED.show();
                                                            // previousMillisX = currentMillis;







    


    

    

